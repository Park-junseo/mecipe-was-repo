name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '20.x'

jobs:
  # 테스트 및 빌드 검증
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: mecipe-was/package-lock.json

      - name: Install dependencies
        working-directory: ./mecipe-was
        run: npm ci

      - name: Generate Prisma Client
        working-directory: ./mecipe-was
        run: npx prisma generate

      - name: Run linter
        working-directory: ./mecipe-was
        run: npm run lint

      - name: Run tests
        working-directory: ./mecipe-was
        run: npm test

      - name: Build application
        working-directory: ./mecipe-was
        run: npm run build

  # Docker 이미지 빌드 및 배포
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub (Optional)
        if: ${{ secrets.DOCKER_USERNAME != '' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker images
        run: |
          docker compose build

      - name: Save Docker images
        run: |
          docker save -o app-image.tar $(docker compose config | grep 'image:' | awk '{print $2}' | head -1 || echo "mecipe-app:latest")

      - name: Copy files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          source: "docker-compose.yml,nginx/*,certbot/*,.env"
          target: "/app/mecipe-was"

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            cd /app/mecipe-was
            
            # 환경 변수 파일 확인
            if [ ! -f .env ]; then
              echo "Error: .env file not found!"
              exit 1
            fi
            
            # Docker Compose로 서비스 중지 및 업데이트
            docker compose down
            
            # 이전 이미지 정리 (선택사항)
            docker image prune -f
            
            # 새로운 컨테이너 시작
            docker compose up -d --build
            
            # 헬스체크
            echo "Waiting for services to be healthy..."
            sleep 30
            
            # 애플리케이션 상태 확인
            if docker compose ps | grep -q "Up"; then
              echo "Deployment successful!"
            else
              echo "Deployment failed!"
              docker compose logs
              exit 1
            fi

      - name: Clean up
        if: always()
        run: |
          rm -f app-image.tar

  # SSL 인증서 초기 설정 (수동 트리거)
  setup-ssl:
    name: Setup SSL Certificate
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Setup SSL on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            cd /app/mecipe-was
            
            # Let's Encrypt 인증서 발급
            docker compose run --rm certbot certonly \
              --webroot \
              --webroot-path=/var/www/certbot \
              --email ${{ secrets.SSL_EMAIL }} \
              --agree-tos \
              --no-eff-email \
              -d ${{ secrets.DOMAIN_NAME }}
            
            # Nginx 재시작
            docker compose restart nginx

