name: Deploy with Self-Hosted Runner (Docker Compose)

on:
  push:
    branches: ["main"]
  workflow_dispatch:  # ÏàòÎèô Ïã§Ìñâ Í∞ÄÎä•

jobs:
  # üß™ 1. ÌÖåÏä§Ìä∏ Job
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: mecipe-was/package-lock.json

    - name: Install dependencies
      working-directory: ./mecipe-was
      run: npm ci

    - name: Generate Prisma Client
      working-directory: ./mecipe-was
      run: npx prisma generate

    - name: Run linter
      working-directory: ./mecipe-was
      run: npm run lint

    - name: Run tests
      working-directory: ./mecipe-was
      run: npm test

    - name: Build application
      working-directory: ./mecipe-was
      run: npm run build

  # üì¶ 2. Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è Ìë∏Ïãú (GitHub ÏÑúÎ≤ÑÏóêÏÑú ÎπåÎìú - ÎÑ§Ìä∏ÏõåÌÅ¨ Îπ†Î¶Ñ!)
  build_and_push_docker:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push NestJS image
      uses: docker/build-push-action@v5
      with:
        context: ./mecipe-was
        file: ./mecipe-was/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/mecipe-api-server:latest
          ${{ secrets.DOCKER_USERNAME }}/mecipe-api-server:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/mecipe-api-server:latest
        cache-to: type=inline

    - name: Build and push Nginx image
      uses: docker/build-push-action@v5
      with:
        context: ./nginx
        file: ./nginx/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/mecipe-nginx:latest
          ${{ secrets.DOCKER_USERNAME }}/mecipe-nginx:${{ github.sha }}

  # üöÄ 3. Self-Hosted RunnerÏóêÏÑú Î∞∞Ìè¨
  deploy:
    needs: [test, build_and_push_docker]
    runs-on: [self-hosted, Linux, X64]
    steps:
    - name: Cleanup workspace
      run: |
        echo "Cleaning up workspace..."
        sudo chown -R $USER:$USER $GITHUB_WORKSPACE || true
        
        # certbot ÎîîÎ†âÌÜ†Î¶¨ Î∞±ÏóÖ (SSL Ïù∏Ï¶ùÏÑú Î≥¥Ï°¥)
        if [ -d "$GITHUB_WORKSPACE/certbot" ]; then
          echo "Backing up SSL certificates..."
          sudo mv $GITHUB_WORKSPACE/certbot /tmp/certbot-backup || true
        fi
        
        # Í∏∞Ï°¥ ÌååÏùº ÏÇ≠Ï†ú
        sudo rm -rf $GITHUB_WORKSPACE/* || true
        sudo rm -rf $GITHUB_WORKSPACE/.* 2>/dev/null || true
        
        # certbot Î≥µÏõê
        if [ -d "/tmp/certbot-backup" ]; then
          echo "Restoring SSL certificates..."
          sudo mv /tmp/certbot-backup $GITHUB_WORKSPACE/certbot || true
        fi
    
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Create .env file
      run: |
        echo "Creating .env file..."
        cat > .env << 'EOF'
        # Docker
        DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
        
        # Application
        NODE_ENV=production
        PORT=${{ secrets.PORT || 4000 }}
        SOCKET_PORT=${{ secrets.SOCKET_PORT || 4100 }}
        
        # Domain
        DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
        SSL_EMAIL=${{ secrets.SSL_EMAIL }}
        
        # Database
        DATABASE_URL=${{ secrets.DATABASE_URL }}
        
        # JWT
        JWT_SECRET=${{ secrets.JWT_SECRET }}

        # LOGIN CRYPTO
        SECRET_LOGIN_CRYPTO=${{ secrets.SECRET_LOGIN_CRYPTO }}

        # API Key (optional)
        API_KEY=${{ secrets.API_KEY }}
        BUILD_API_KEY=${{ secrets.BUILD_API_KEY }}

        # SECRET Key
        COUPON_SECRET=${{ secrets.COUPON_SECRET }}
        PRODUCT_SECRET=${{ secrets.PRODUCT_SECRET }}
        EOF
        chmod 600 .env

    - name: Pull latest images from Docker Hub
      run: |
        echo "Pulling latest Docker images from Docker Hub..."
        docker compose pull || echo "Pull failed, will build locally as fallback"

    - name: Deploy with Docker Compose
      run: |
        echo "--- Starting deployment ---"
        
        # certbot ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ± (ÏóÜÏúºÎ©¥)
        mkdir -p certbot/conf certbot/www
        
        # Stop and remove old containers
        docker compose down
        
        # Start new containers (use pulled images)
        echo "Starting containers..."
        docker compose up -d
        
        # Wait for services to be healthy
        echo "Waiting for services to start..."
        sleep 30
        
        # Check service status
        docker compose ps
        
        echo "--- Deployment complete ---"

    - name: Run database migrations
      run: |
        echo "Running database migrations..."
        docker compose exec -T app npx prisma migrate deploy || echo "Migration failed or no migrations to apply"

    - name: Health check
      run: |
        echo "Performing health check..."
        
        # Wait a bit for the app to fully start
        sleep 10
        
        # Check if containers are running
        if docker compose ps | grep -q "Up"; then
          echo "‚úÖ Services are running"
          
          # Try to reach the health endpoint
          if curl -f http://localhost/health 2>/dev/null; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ö†Ô∏è Health endpoint not responding yet"
          fi
        else
          echo "‚ùå Some services failed to start"
          docker compose logs --tail=50
          exit 1
        fi

    - name: Cleanup old images
      run: |
        echo "Cleaning up old Docker images..."
        docker image prune -f
    
    - name: Fix workspace permissions for next run
      if: always()
      run: |
        echo "Fixing workspace permissions..."
        sudo chown -R $USER:$USER $GITHUB_WORKSPACE || true

